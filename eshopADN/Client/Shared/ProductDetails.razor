@page "/product/{id:int}"
@inject IProductService ProductService

<h3>Dettagli del prodotto</h3>

@if (_product == null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper">
            <img class="media-img" src="@_product.ImagePath" alt="@_product.Titolo"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Titolo</h2>
            <p>@_product.Descrizione</p>
            <div>
                <select class="form-control" @bind="_currentTypeId">
                    @foreach (var variant in _product.ProductVariants)
                    {
                        <option value="@variant.ProductTypeId" >
                            @variant.ProductType?.Nome
                        </option>
                    }
                </select>
            </div>
        </div>
        @if (GetCurrentProductVariant(_product) != null)
        {
            <div class="media-price">
                <h3>@GetCurrentProductVariant(_product)?.Price.ToString("C")</h3>
                <h5>anzichè @GetCurrentProductVariant(_product)?.OriginalPrice.ToString("C")</h5>
                <button class="btn btn-primary">Aggiungi al carrello</button>
            </div>
        }
        @if (!_product.IsAvailable)
        {
            <div class="alert alert-warning" role="alert">
                <strong>Attenzione!</strong> Prodotto disponibile solo su ordinazione.
                <form>
                    <input type="text" placeholder="email"/>
                    <input type="text" placeholder="nome"/>
                    <button type="submit" class="btn btn-primary">Richiedi informazioni</button>
                </form>
            </div>
        }
    </div>
}

@code {
    private Product? _product;
    private string? _message = string.Empty;
    private int _currentTypeId = 1;

    [Parameter] public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Caricamento";
        var response = await ProductService.GetProductByIdAsync(Id);
        switch (response.Success)
        {
            case true:
                _product = response.Data;
                GetDefaultProductType(_product);
                break;
            case false:
                _message = response.Message + " " + "Il tuo prodotto non è stato trovato";
                break;
        }
    }

    private void GetDefaultProductType(Product? product)
    {
        _currentTypeId = product?.ProductVariants.FirstOrDefault()?.ProductTypeId ?? 1;
    }
    

    protected ProductVariant? GetCurrentProductVariant(Product product)
    {
        return product.ProductVariants.FirstOrDefault(x => x.ProductTypeId ==_currentTypeId);
    }

}

